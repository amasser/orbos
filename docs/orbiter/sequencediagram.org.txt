title Kubernetes Reconciliation
participant orbiter
participant cloud provider
participant kubernetes
participant node-agent(s)

orbiter->cloud provider: Ensure infrastructure
orbiter<--cloud provider: Pools and IPs
orbiter->cloud provider:Ensure desired number of machines per pool\n(add machines or kubectl drain + remove machines)
activate orbiter
orbiter->node-agent(s):Pass initial metadata to new machines\nand run node-agent(s) on them
activate node-agent(s)
node-agent(s)->node-agent(s):Ensure software\nand restart node
node-agent(s)->cloud provider: Mark self as initialized
deactivate node-agent(s)
activate node-agent(s)
orbiter->cloud provider: Wait until all node-agents are initialized
deactivate orbiter
orbiter->cloud provider:Ensure kubernetes nodes number is equal\nto cloud provider machines number\n(kubeadm init/join)
node-agent(s)->kubernetes:Safe metadata as soon as \nKubernetes API is available
deactivate node-agent(s)
note right of orbiter:Kubernetes scale is ensured, from\nnow on software versions are ensured...
loop #2f2e7b #white alpha.[software].caos.ch/desired-version is current-version
node-agent(s)->kubernetes:Read metadata
kubernetes-->node-agent(s):Node metadata
end
loop #2f2e7b #white i < nodes
orbiter->kubernetes:Read metadata
kubernetes-->orbiter:Node metadata
opt #2f2e7b #white desired version != current version or desired version != actually needed version
orbiter->kubernetes:Save metadata\nalpha.node.caos.ch/changes-allowed true
loop #2f2e7b #white alpha.node.caos.ch/changes-allowed is true
orbiter->kubernetes:Read metadata
kubernetes-->orbiter:Node metadata
alt #2f2e7b #white alpha.[software].caos.ch/desired-version is not the actually needed version; continue in loop after execution
orbiter->kubernetes:kubectl drain + kubectl cordon
orbiter->kubernetes:Save metadata\nalpha.[software].caos.ch/desired-version [actually needed version]\nalpha.[software].caos.ch/desired-version [actually needed version]\nalpha.[software].caos.ch/desired-version [actually needed version]
activate node-agent(s)
node-agent(s)->kubernetes: Save metadata\nalpha.node.caos.ch/ready false
node-agent(s)->node-agent(s):Ensure software
else alpha.node.caos.ch/ready is true and alpha.node.caos.ch/changes-allowed is true and alpha.[software].caos.ch/desired-version is alpha.[software].caos.ch/current-version
orbiter->kubernetes:kubectl uncordon
orbiter->kubernetes:Save metadata alpha.node.caos.ch/changes-allowed false
else continue in loop
end
node-agent(s)->node-agent(s):Possibly restart\nnode
node-agent(s)->kubernetes: Save metadata\nalpha.node.caos.ch/ready true
deactivate node-agent(s)
end
end
end
