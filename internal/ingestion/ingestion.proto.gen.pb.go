// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/caos/ingestion/internal/src/proto/ingestion.proto.gen

package ingestion

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventsRequest struct {
	Orb                  string          `protobuf:"bytes,1,opt,name=orb,proto3" json:"orb,omitempty"`
	Events               []*EventRequest `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EventsRequest) Reset()         { *m = EventsRequest{} }
func (m *EventsRequest) String() string { return proto.CompactTextString(m) }
func (*EventsRequest) ProtoMessage()    {}
func (*EventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da9aaf13f90b55ec, []int{0}
}

func (m *EventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventsRequest.Unmarshal(m, b)
}
func (m *EventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventsRequest.Marshal(b, m, deterministic)
}
func (m *EventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsRequest.Merge(m, src)
}
func (m *EventsRequest) XXX_Size() int {
	return xxx_messageInfo_EventsRequest.Size(m)
}
func (m *EventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventsRequest proto.InternalMessageInfo

func (m *EventsRequest) GetOrb() string {
	if m != nil {
		return m.Orb
	}
	return ""
}

func (m *EventsRequest) GetEvents() []*EventRequest {
	if m != nil {
		return m.Events
	}
	return nil
}

type EventRequest struct {
	CreationDate         *timestamp.Timestamp `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	Data                 *_struct.Struct      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Type                 string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventRequest) Reset()         { *m = EventRequest{} }
func (m *EventRequest) String() string { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()    {}
func (*EventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da9aaf13f90b55ec, []int{1}
}

func (m *EventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRequest.Unmarshal(m, b)
}
func (m *EventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRequest.Marshal(b, m, deterministic)
}
func (m *EventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequest.Merge(m, src)
}
func (m *EventRequest) XXX_Size() int {
	return xxx_messageInfo_EventRequest.Size(m)
}
func (m *EventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequest proto.InternalMessageInfo

func (m *EventRequest) GetCreationDate() *timestamp.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *EventRequest) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*EventsRequest)(nil), "caos.ingestion.api.v1.EventsRequest")
	proto.RegisterType((*EventRequest)(nil), "caos.ingestion.api.v1.EventRequest")
}

func init() {
	proto.RegisterFile("github.com/caos/ingestion/internal/src/proto/ingestion.proto.gen", fileDescriptor_da9aaf13f90b55ec)
}

var fileDescriptor_da9aaf13f90b55ec = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x5b, 0x2b, 0x6e, 0x5b, 0x28, 0x0b, 0x6a, 0x88, 0x82, 0xa5, 0x7a, 0x28, 0x2a,
	0x1b, 0xac, 0x07, 0x11, 0x0f, 0x8a, 0x58, 0x50, 0x4f, 0x92, 0x7a, 0xf2, 0xa0, 0x6c, 0xd2, 0x31,
	0x5d, 0x68, 0xb2, 0x71, 0x77, 0x52, 0xa8, 0x4f, 0xe1, 0xb3, 0xf9, 0x44, 0x92, 0x4d, 0x63, 0x25,
	0xb5, 0x82, 0xb7, 0x49, 0xfe, 0xf9, 0xfe, 0xfc, 0x33, 0x19, 0x72, 0x15, 0x0a, 0x1c, 0xa7, 0x3e,
	0x0b, 0x64, 0xe4, 0x06, 0x5c, 0x6a, 0x57, 0xc4, 0x21, 0x68, 0x14, 0x32, 0x76, 0x45, 0x8c, 0xa0,
	0x62, 0x3e, 0x71, 0xb5, 0x0a, 0xdc, 0x44, 0x49, 0x94, 0x0b, 0x91, 0x99, 0x67, 0x16, 0x42, 0x4c,
	0x37, 0x33, 0x8c, 0x2d, 0x14, 0x9e, 0x08, 0x36, 0x3d, 0x71, 0xf6, 0x42, 0x29, 0xc3, 0x09, 0xe4,
	0xa0, 0x9f, 0xbe, 0xba, 0x28, 0x22, 0xd0, 0xc8, 0xa3, 0x24, 0x67, 0x9d, 0xdd, 0x72, 0x83, 0x46,
	0x95, 0x06, 0x38, 0x57, 0x77, 0xca, 0x2a, 0x44, 0x09, 0xce, 0x72, 0xb1, 0xfb, 0x4c, 0x5a, 0x83,
	0x29, 0xc4, 0xa8, 0x3d, 0x78, 0x4b, 0x41, 0x23, 0x6d, 0x93, 0xaa, 0x54, 0xbe, 0x6d, 0x75, 0xac,
	0xde, 0x86, 0x97, 0x95, 0xf4, 0x82, 0xd4, 0xc1, 0xb4, 0xd8, 0x95, 0x4e, 0xb5, 0xd7, 0xe8, 0xef,
	0xb3, 0x5f, 0x63, 0x32, 0xe3, 0x33, 0xb7, 0xf1, 0xe6, 0x48, 0xf7, 0xc3, 0x22, 0xcd, 0x9f, 0x02,
	0xbd, 0x24, 0xad, 0x40, 0x01, 0xcf, 0xc0, 0x97, 0x11, 0x47, 0x30, 0x5f, 0x6a, 0xf4, 0x1d, 0x96,
	0xa7, 0x64, 0x45, 0x4a, 0xf6, 0x58, 0x0c, 0xe9, 0x35, 0x0b, 0xe0, 0x86, 0x23, 0xd0, 0x23, 0x52,
	0x1b, 0x71, 0xe4, 0x76, 0xc5, 0x70, 0xdb, 0x4b, 0xdc, 0xd0, 0xcc, 0xee, 0x99, 0x26, 0x4a, 0x49,
	0x0d, 0x67, 0x09, 0xd8, 0x55, 0x33, 0x8e, 0xa9, 0xfb, 0x9f, 0x16, 0x69, 0xdf, 0x15, 0xe1, 0x87,
	0xa0, 0xa6, 0x22, 0x00, 0x7a, 0x4e, 0xd6, 0x6f, 0x81, 0x4f, 0x70, 0xfc, 0x4e, 0xb7, 0x96, 0x2c,
	0x07, 0xd9, 0xc2, 0x9c, 0x15, 0xef, 0xe9, 0x19, 0x59, 0xf3, 0x80, 0x8f, 0x66, 0xff, 0x06, 0xef,
	0x09, 0x79, 0x48, 0xf5, 0x38, 0xdf, 0x3f, 0x3d, 0xf8, 0x6b, 0xad, 0xc5, 0xef, 0x59, 0xe5, 0x75,
	0x7d, 0xfc, 0x74, 0x58, 0x3e, 0x3f, 0xa9, 0x7c, 0x81, 0xa0, 0x16, 0xc7, 0xf7, 0x6d, 0xed, 0xd7,
	0x0d, 0x7d, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x3c, 0xca, 0xeb, 0xb3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IngestionServiceClient is the client API for IngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngestionServiceClient interface {
	// Healthz returns status OK as soon as the service started
	Healthz(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Ready returns status OK as soon as all dependent services are available
	Ready(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	PushEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type ingestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionServiceClient(cc grpc.ClientConnInterface) IngestionServiceClient {
	return &ingestionServiceClient{cc}
}

func (c *ingestionServiceClient) Healthz(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/caos.ingestion.api.v1.IngestionService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) Ready(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/caos.ingestion.api.v1.IngestionService/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) PushEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/caos.ingestion.api.v1.IngestionService/PushEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionServiceServer is the server API for IngestionService service.
type IngestionServiceServer interface {
	// Healthz returns status OK as soon as the service started
	Healthz(context.Context, *empty.Empty) (*empty.Empty, error)
	// Ready returns status OK as soon as all dependent services are available
	Ready(context.Context, *empty.Empty) (*empty.Empty, error)
	PushEvents(context.Context, *EventsRequest) (*empty.Empty, error)
}

// UnimplementedIngestionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIngestionServiceServer struct {
}

func (*UnimplementedIngestionServiceServer) Healthz(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (*UnimplementedIngestionServiceServer) Ready(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (*UnimplementedIngestionServiceServer) PushEvents(ctx context.Context, req *EventsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvents not implemented")
}

func RegisterIngestionServiceServer(s *grpc.Server, srv IngestionServiceServer) {
	s.RegisterService(&_IngestionService_serviceDesc, srv)
}

func _IngestionService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caos.ingestion.api.v1.IngestionService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).Healthz(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caos.ingestion.api.v1.IngestionService/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).Ready(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_PushEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).PushEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caos.ingestion.api.v1.IngestionService/PushEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).PushEvents(ctx, req.(*EventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IngestionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "caos.ingestion.api.v1.IngestionService",
	HandlerType: (*IngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _IngestionService_Healthz_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _IngestionService_Ready_Handler,
		},
		{
			MethodName: "PushEvents",
			Handler:    _IngestionService_PushEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/caos/ingestion/internal/src/proto/ingestion.proto.gen",
}
